<?php

$insert[]="INSERT INTO `user_type` (`ut_user_type_id`, `ut_user_type_name`) VALUES
(1, 'User'),
(2, 'Admin');
";

$insert[] = "INSERT INTO `course` (`crs_course_id`, `crs_course_name`, `crs_full_description`, `crs_short_description`, `crs_level`, `crs_status`, `crs_image_path`) VALUES
(1, 'C++ Adventure: Discovering the World of Programming', 'Embark on an extraordinary adventure of discovering the secrets of the C++ language in our course \"C++ Adventure: Discovering the World of Programming\"! This course will give you the solid foundation you need to start your programming journey. You\'ll connect with basic C++ programming concepts such as variables, loops, conditionals, and functions, and delve deeper into object-oriented programming. With us, you will go through exciting challenges that will allow you to gain the confidence and skills necessary to create your own applications in C++. Get ready for an adventurous journey that will lead you to programming mastery!', 'Embark on an extraordinary adventure of discovering the secrets of the C++ language.', 'Beginner', 'Active', '../image/adventure.jpg'),
(2, 'C++ Odyssey: Cruise Beyond Initial Waters', 'Get ready for a true C++ programming odyssey! Our \"C++ Odyssey: Cruise Beyond the Initial Waters\" course is a journey for those who have already mastered the basics and want to explore new areas of the language. You\'ll dive into the world of templates, exceptions, overloading, and memory management to discover how to get the most out of C++. You\'ll learn advanced techniques that will help you create more efficient and flexible applications, and you\'ll gain the skills you need to solve even the most complex programming problems. Start your odyssey today and take your knowledge to new waters!', 'Dive deeper into the world of C++ with advanced topics like templates, exceptions, and memory management.', 'Intermediate', 'Upcoming', '../image/odyssey.jpg'),
(3, 'C++ Revolution: Evolution of Code Master', 'Welcome to the C++ programming revolution! Our \"C++ Revolution: Evolution of the Master Code\" course is a challenge for experienced programmers who want to improve their skills. Discover the deeper secrets of C++ as you explore multithreading, regular expressions, functional programming, and more! Master advanced code optimization techniques to create applications that are both powerful and elegant. Learn the secrets of the best programmers and become a master of your craft. Join the revolution now and transform your code forever!', 'Join the C++ programming revolution and master advanced topics like multithreading and functional programming.', 'Advanced', 'Inactive', '../image/revolution.jpg');
";

$insert[]="INSERT INTO `topic` (`top_topic_id`, `top_topic_name`, `top_course_id`) VALUES
(1, 'Installing the work environment and tools', 1),
(2, 'Theory and terminology of programming', 1),
(3, 'Variables and Data Types', 1),
(4, 'Understanding Comments', 1),
(5, 'Starting the first program', 1),
(6, 'Arithmetic operators', 1),
(7, 'Comparison and logical operators', 1),
(8, 'Handling Input and Output Streams', 1),
(9, 'Conditional Statements', 2),
(10, 'Looping Constructs', 2),
(11, 'Function Fundamentals', 2),
(12, 'Handling One-Dimensional Arrays', 2),
(13, 'Utilizing the return Keyword', 2),
(14, 'Passing One-Dimensional Arrays to Functions', 2),
(15, 'Passing Arguments by Reference', 2),
(16, 'String Manipulation', 2),
(17, 'Object-Oriented Programming Basics', 3),
(18, 'Text Search Operations', 3),
(19, 'Text Manipulation and Length Verification', 3),
(20, 'Essential Keywords: continue and break', 3),
(21, 'Nested Looping Techniques', 3),
(22, 'Exploring the while Loop', 3),
(23, 'Input Handling: Standard Input Stream', 3),
(24, 'File Basics and Introduction to File Handling', 3);";


$insert[] = "INSERT INTO `lesson` (`les_lesson_id`, `les_course_id`, `les_lesson_title`, `les_lesson_content`, `les_lesson_order`, `les_points`) VALUES
(1, 1, 'Introduction and Choosing Your Working Environment',  '<p>Welcome to the first lesson of our exciting course, \"C++ Adventure: Discovering the World of Programming\"! In this lesson, we\'\'ll start our journey by introducing you to the fundamentals of C++ programming and helping you choose the right working environment for your coding adventures.</p>\r\n\r\n<h3>What is C++?</h3>\r\n<p>C++ is a powerful and versatile programming language widely used for developing a variety of applications, including system software, games, desktop applications, and more. It is an extension of the C programming language with added features such as object-oriented programming, templates, and exceptions handling.</p>\r\n\r\n<h3>Why Learn C++?</h3>\r\n<p>Learning C++ opens up a world of opportunities for you as a programmer. Here are just a few reasons why you should consider learning C++:</p>\r\n<ul>\r\n <li>Performance: C++ allows you to write high-performance code that can execute efficiently, making it ideal for applications that require speed and resource optimization.</li>\r\n <li>Versatility: With C++, you can develop applications for a wide range of platforms, including desktop, mobile, and embedded systems.</li>\r\n <li>Industry Demand: Many companies look for developers with C++ skills, especially in fields such as game development, finance, and system programming.</li>\r\n <li>Foundation for Other Languages: Understanding C++ provides a solid foundation for learning other programming languages, making it easier to transition to new technologies in the future.</li>\r\n</ul>\r\n\r\n<h3>Setting Up Your Development Environment</h3>\r\n<p>Before we embark on our coding adventures, let\'\'s take a moment to set up your development environment. Here are a few popular environments for C++ programming:</p>\r\n\r\n<h4>Dev-C++:</h4>\r\n<p>Dev-C++ is a free development environment primarily focused on C++. It includes a code editor, compilation and debugging tools, and a user interface based on the Windows API library. It is relatively lightweight and easy to use, making it a popular choice among beginner programmers.</p>\r\n\r\n<h4>wxDev-C++:</h4>\r\n<p>wxDev-C++ is an extension of Dev-C++ that adds support for the wxWidgets GUI framework. It allows developers to create applications with wxWidgets-based UI that can be portable between different platforms.</p>\r\n\r\n<h4>Code::Blocks:</h4>\r\n<p>Code::Blocks is an open development environment (IDE) that supports multiple programming languages, including C++. It has an intuitive user interface, support for plugins and tools for compilation, debugging and project management. It is available on a variety of platforms, including Windows, macOS, and Linux, making it a popular choice for many developers.</p>\r\n\r\n<h4>Borland C++:</h4>\r\n<p>Borland C++ is a programming environment created by Borland for programmers working mainly in C++. It provides tools for building Windows applications and various features to make programming easier, such as a code editor, debugger, and form builder.</p>\r\n\r\n<h4>Visual C++:</h4>\r\n<p>Visual C++ is part of Microsoft\'\'s suite of development tools known as Visual Studio. It provides comprehensive application development tools for the Windows platform, including a code editor, debugger, UI design, and build and project management tools. It is widely used in the industry due to its advanced features and integration with other Microsoft tools.</p>\r\n\r\n<h3>Installing Code::Blocks:</h3>\r\n<p>Code::Blocks is a popular choice among C++ developers due to its simplicity and ease of use. Here\'\'s how you can install it:</p>\r\n<ol>\r\n <li>Visit the Code::Blocks website at <a href=\"https://www.codeblocks.org/\">codeblocks.org</a>.</li>\r\n <li>Navigate to the \"Downloads\" section and select the installer containing \"(3mingw)\" in its name, which includes the necessary MinGW compiler for your operating system (Windows, macOS, or Linux).</li>\r\n <li>Download and run this installer on your computer to install Code::Blocks along with the MinGW compiler.</li>\r\n <li>Follow the on-screen instructions to install Code::Blocks with the default settings.</li>\r\n <li>Once installation is complete, launch Code::Blocks.</li>\r\n</ol>\r\n\r\n<p><img lsf_file_name=\'1_1_CodeBlocksInstalling\' /></p>\r\n\r\n<p class=\"warning\"><strong>Important Note:</strong> When saving your projects in Code::Blocks, it is essential to include the \".cpp\" extension in the file name, as it indicates that the file contains C++ source code. This ensures proper recognition by the IDE and other tools.</p>\r\n\r\n<p>Your Adventure Begins Now!</p>\r\n<p>Congratulations! You\'\'ve completed the first lesson of \"C++ Adventure: Discovering the World of Programming.\" In this lesson, we\'\'ve introduced you to the basics of C++ and helped you set up Visual Studio Code as your development environment. Now, it\'\'s time to embark on your programming adventure and start exploring the exciting world of C++!</p>\r\n\r\n<p>In the next lesson, we\'\'ll dive deeper into the core concepts of C++ programming, including theory and terminology that form the foundation of software development. Get ready to level up your coding skills and unlock the full potential of C++!</p>', 1, 30),
(2, 1, 'Fundamentals of Programming - Theory and Terminology', '<p>Welcome to the second lesson of our course, \"C++ Adventure: Discovering the World of Programming\"! In this lesson, we\'\'ll delve into the basics of programming, exploring the theory and terminology that form the foundation of software development.</p>\r\n\r\n<h3>Understanding Program Structure:</h3>\r\n\r\n<p>At its core, a computer program is a set of instructions that tells a computer what tasks to perform. These instructions are written in a programming language, such as C++, and are organized into a structured format that the computer can understand and execute.</p>\r\n\r\n<h4>Components of a Program:</h4>\r\n\r\n<ul>\r\n <li><strong>Source Code:</strong> Source code is the human-readable form of a program written in a programming language. It consists of instructions, statements, and declarations that define the behavior of the program.</li>\r\n <li><strong>Compiler:</strong> A compiler is a software tool that translates source code written in a high-level programming language (like C++) into machine code that the computer can execute. It performs syntax checking, optimization, and code generation during the compilation process.</li>\r\n <li><strong>Compilation:</strong> Compilation is the process of converting source code into machine code. It involves running the compiler on the source code to produce an executable file that can be run on a computer.</li>\r\n <li><strong>Executable File:</strong> An executable file is the output of the compilation process. It contains the machine code version of the program and can be executed directly by the computer\'\'s operating system.</li>\r\n</ul>\r\n\r\n<h3>Basic Terminology:</h3>\r\n\r\n<p>Now, let\'\'s explore some fundamental terms related to programming:</p>\r\n\r\n<ul>\r\n <li><strong>Integrated Development Environment (IDE):</strong> An IDE is a software application that provides a comprehensive set of tools for software development. It typically includes features such as a code editor, compiler, debugger, and project management capabilities.</li>\r\n <li><strong>Source File:</strong> A source file is a file containing source code written in a programming language. In C++, source files usually have a .cpp extension.</li>\r\n <li><strong>Header File:</strong> A header file is a file containing declarations and definitions that are shared across multiple source files. It typically has a .h extension and is included in source files using the include directive.</li>\r\n <li><strong>Syntax:</strong> Syntax refers to the rules and structure of a programming language. It defines how statements and expressions should be written to be valid and understandable by the compiler.</li>\r\n <li><strong>Semantic:</strong> Semantic refers to the meaning or interpretation of the statements and expressions in a programming language. It determines the behavior of the program when executed.</li>\r\n</ul>\r\n\r\n<h3>Conclusion:</h3>\r\n\r\n<p>In this lesson, we\'\'ve explored the fundamental theory and terminology of programming. We\'\'ve learned about the structure of a computer program, the components involved in software development, and basic programming terms such as source code, compilation, and syntax. Understanding these concepts lays the groundwork for becoming a proficient programmer and mastering the art of software development.</p>\r\n\r\n<p>In the next lesson, we\'\'ll guide you through the process of creating and running your first C++ program. Get ready to expand your knowledge and take your programming skills to the next level!</p>', 2, 50),
(3, 1, '\'Running Your First Program\'', '<p>Welcome to the third lesson of our course, \"C++ Adventure: Discovering the World of Programming\"! In this lesson, we\'ll guide you through the process of creating and running your first C++ program using Code::Blocks, a popular integrated development environment (IDE) for C++ development.</p>\r\n\r\n<h3>Creating a New Program</h3>\r\n\r\n<p>Now that Code::Blocks is set up, let\'s create a new C++ program:</p>\r\n\r\n<ol>\r\n    <li><strong>Open Code::Blocks:</strong> Launch Code::Blocks from your desktop or applications menu.</li>\r\n    <li><strong>Create a New Project:</strong> Go to the \"File\" menu and select \"New\" > \"Project...\". Choose \"Console application\" and click \"Go\".</li>\r\n    <li><strong>Set Project Title and Location:</strong> Enter a name for your project and choose a location to save it. Click \"Next\".</li>\r\n    <li><strong>Select Compiler:</strong> Choose a compiler for your project (e.g., GNU GCC Compiler) and click \"Finish\".</li>\r\n    <li><strong>Create a New Source File:</strong> Right-click on your project name in the \"Projects\" panel and select \"New File\". Choose \"C++ Source\" and click \"Go\". Enter a file name (e.g., <code>main.cpp</code>) and click \"Next\". Click \"Finish\" to create the file.</li>\r\n</ol>\r\n\r\n<h3>Detecting When a File Has Been Modified</h3>\r\n\r\n<p>When working on a project, it\'s important to know when a file has been modified. Code::Blocks provides features to help you detect changes in your source files:</p>\r\n\r\n<ul>\r\n    <li><strong>Automatic Detection:</strong> Code::Blocks automatically detects changes in your source files and prompts you to reload them when you switch back to the editor window.</li>\r\n    <li><strong>File Status Icons:</strong> Keep an eye on the file status icons in the editor tab. A modified file will be indicated by an asterisk (*) next to the file name.</li>\r\n</ul>\r\n\r\n<h3>Writing Your First Code</h3>\r\n\r\n<p>Now it\'s time to write your first C++ code:</p>\r\n\r\n<p><img lsf_file_name=\'1_3_FirstProgram\' /></p>\r\n\r\n<p>This simple program prints \"Welcome to my C++ program!\" to the console using the <code>std::cout</code> object. Here\'s what each part of the code does:</p>\r\n\r\n<ul>\r\n    <li><code>include &lt;iostream&gt;</code>: This line includes the input/output stream library, which provides functions for input and output operations.</li>\r\n    <li><code>int main() { }</code>: This is the main function, where the execution of the program begins.</li>\r\n    <li><code>std::cout &lt;&lt; \"Welcome to my C++ program!\" &lt;&lt; std::endl;</code>: This line outputs the text \"Welcome to my C++ program!\" to the console using the <code>std::cout</code> object, followed by a newline (<code>std::endl</code>).</li>\r\n    <li><code>return 0;</code>: This line exits the main function and returns 0 to the operating system, indicating successful program execution.</li>\r\n</ul>\r\n\r\n<h3>Compiling and Running Your Program</h3>\r\n\r\n<p>Now let\'s compile and run your program:</p>\r\n\r\n<ol>\r\n    <li><strong>Build Your Project:</strong> Go to the \"Build\" menu and select \"Build\" (or press <kbd>F9</kbd>). This will compile your code and create an executable file.</li>\r\n	<p><img lsf_file_name=\'1_3_FirstRunProgram\' /></p>\r\n    <li><strong>Run Your Program:</strong> Once the build process is complete, go to the \"Build\" menu again and select \"Run\" (or press <kbd>Ctrl</kbd>+<kbd>F10</kbd>). This will execute your program, and you should see \"Welcome to my C++ program!\" printed in the console output window.</li>\r\n	<p><img lsf_file_name=\'1_3_FirstProgramOutput\' /></p>\r\n</ol>\r\n\r\n<h3>Conclusion</h3>\r\n\r\n<p>Congratulations! You\'ve successfully created and run your first C++ program using Code::Blocks. In this lesson, you\'ve learned how to create a new C++ project, detect file modifications, write your first C++ code, compile it, and run it. This is just the beginning of your programming journey, and there\'s much more to explore as you continue to learn and practice C++ programming.</p>\r\n\r\n<p>In the next lesson, we\'ll explore more C++ concepts and techniques to further enhance your programming skills. Keep coding and happy programming!</p>\r\n', 3, 60),
(4, 1, 'Fundamentals of C++ Programming', '<p>Welcome to the next lesson of our course, where we\'ll explore the fundamentals of programming in C++. Understanding these basics is crucial as they form the building blocks of any C++ program.</p>\r\n\r\n<h3>Directives and Libraries</h3>\r\n\r\n<p>In C++, directives are special commands that provide instructions to the compiler. One of the most common directives is <code>include</code>, which is used to include libraries in our program. Libraries contain pre-written code that we can use in our programs to perform various tasks.</p>\r\n\r\n<p>Two commonly used libraries for input/output operations are:</p>\r\n\r\n<ul>\r\n    <li><code>&lt;iostream&gt;</code>: Provides functionality for standard input/output streams.</li>\r\n    <li><code>&lt;cstdio&gt;</code>: Provides functionality for input/output operations similar to the C standard library.</li>\r\n</ul>\r\n\r\n<h3>Basic Input/Output Functions</h3>\r\n\r\n<p class=\"note\">Don\'t worry, this code is just to show how the libraries work. We will talk more about the input/output function in the lesson <a href=\"javascript:void(0)\">Handling Output Stream</a> and <a href=\"javascript:void(0)\">Handling Input Stream</a></p> \r\n\r\n<h4>Using <code>&lt;iostream&gt;</code>:</h4>\r\n\r\n<p><img lsf_file_name=\'1_4_iostreamLib\' /></p>\r\n\r\n<p>In this example, <code>std::cout</code> is used to display a message prompting the user to enter a number, <code>std::cin</code> is used to read the input, and <code>std::endl</code> is used to end the line and flush the output buffer.</p>\r\n\r\n<h4>Using <code>&lt;cstdio&gt;</code>:</h4>\r\n\r\n<p><img lsf_file_name=\'1_4_cstdioLib\' /></p>\r\n\r\n<p>In this example, <code>printf()</code> is used to display a message prompting the user to enter a number, <code>scanf()</code> is used to read the input, and <code>printf()</code> is used to display the entered number.</p>\r\n\r\n<h4>Result</h4>\r\n\r\n<p>Regardless of which library you import, the result in the console will look like this:</p>\r\n\r\n<p><img lsf_file_name=\'1_4_ProgramOutput\' /></p>\r\n\r\n<h3>Main Program Block</h3>\r\n\r\n<p>The main program block is where the execution of the program begins. It\'s defined by the <code>main()</code> function, which is a special function in C++. The <code>main()</code> function can optionally accept command-line arguments, although they are not used in most beginner-level programs. Here\'s how the main program block looks:</p>\r\n\r\n<p><img lsf_file_name=\'1_4_ProgramBlock\' /></p>\r\n\r\n<p>In this block, you write the instructions that you want your program to execute. It typically contains declarations of variables, function calls, control structures (like loops and conditionals), and other statements.</p>\r\n\r\n<h3>Conclusion</h3>\r\n\r\n<p>In this lesson, we\'ve covered the basics of programming in C++. We discussed directives and libraries (<code>&lt;iostream&gt;</code> and <code>&lt;cstdio&gt;</code>), basic input/output functions using both <code>&lt;iostream&gt;</code> and <code>&lt;cstdio&gt;</code>, and the main program block. Understanding these concepts is essential as they form the foundation of any C++ program.</p>\r\n\r\n<p>In the next lesson, we\'ll delve into the topic of comments in C++. Stay tuned as we continue our journey into the world of C++ programming!</p>', 4, 80),
(5, 1, 'Understanding Comments in C++', '<p>Welcome to the fifth lesson of our course! In this lesson, we\'ll delve into the topic of comments in C++. Understanding how to use comments effectively is essential for writing clear and maintainable code.</p>\r\n\r\n<h3>What are Comments?</h3>\r\n\r\n<p>Comments are non-executable lines of text in a program that are ignored by the compiler. They are used to add human-readable explanations, notes, or annotations to the code. Comments play a crucial role in enhancing code readability, understanding, and maintainability.</p>\r\n\r\n<h3>Types of Comments</h3>\r\n\r\n<h4>Single-Line Comments:</h4>\r\n\r\n<p>Single-line comments begin with <code>//</code> and extend to the end of the line. They are typically used for short comments on a single line.</p>\r\n\r\n<p><img lsf_file_name=\'1_5_SingleLineComment\' /></p>\r\n\r\n<h4>Multi-Line Comments:</h4>\r\n\r\n<p>Multi-line comments, also known as block comments, begin with <code>\/\*</code> and end with <code>*\/</code>. They can span multiple lines and are often used for longer explanations or to temporarily disable blocks of code.</p>\r\n\r\n<p><img lsf_file_name=\'1_5_MultiLineComment\' /></p>\r\n\r\n<h3>When to Use Comments</h3>\r\n\r\n<ul>\r\n  <li><strong>Explain Intent:</strong> Comments should explain the purpose or intent of the code. They help other developers (including yourself in the future) understand why certain decisions were made.</li>\r\n  <li><strong>Document Functionality:</strong> Comments should document how the code works, especially for complex algorithms or non-obvious logic.</li>\r\n  <li><strong>Provide Context:</strong> Comments should provide context for future modifications or enhancements to the codebase.</li>\r\n  <li><strong>TODOs and Notes:</strong> Comments can also be used to mark TODO items, known issues, or temporary workarounds.</li>\r\n</ul>\r\n\r\n<h3>Best Practices for Writing Comments</h3>\r\n\r\n<ul>\r\n  <li><strong>Be Clear and Concise:</strong> Write comments that are easy to understand and directly relevant to the code they annotate.</li>\r\n  <li><strong>Update Comments:</strong> Keep comments up-to-date with changes to the code. Outdated comments can be misleading and confusing.</li>\r\n  <li><strong>Avoid Redundancy:</strong> Comments should complement the code, not duplicate it. Avoid writing comments that merely repeat what the code already expresses.</li>\r\n  <li><strong>Use Descriptive Names:</strong> Use descriptive variable and function names to reduce the need for excessive comments.</li>\r\n  <li><strong>Follow Style Guidelines:</strong> Adhere to consistent commenting styles and formatting conventions across the codebase.</li>\r\n</ul>\r\n<p><img lsf_file_name=\'1_5_CommentsExample\' /></p>\r\n<h3>Conclusion</h3>\r\n\r\n<p>In this lesson, we\'ve explored the importance of comments in C++ programming. We discussed the types of comments available in C++, when to use comments, and best practices for writing comments. Comments are a powerful tool for enhancing code readability, understanding, and maintainability.</p>\r\n\r\n<p>In the next lesson, we\'ll continue our exploration of C++ programming concepts. Stay tuned for more exciting learning!</p>', 5, 60),
(6, 1, 'Handling Output Stream', '<p>Welcome to the sixth lesson of our course! In this lesson, we\'\'ll dive into handling the output stream in C++. We\'\'ll discuss the <code>printf</code> function, the <code>std::cout</code> object, special characters, and provide examples to illustrate their usage.</p>\r\n\r\n<h3>printf Function:</h3>\r\n\r\n<p>The <code>printf</code> function is a commonly used function in C and C++ for formatted output. It allows you to print formatted text to the standard output stream (usually the console). Here\'\'s the basic syntax of <code>printf</code>:</p>\r\n\r\n<p><img lsf_file_name=\'1_6_PrintfFunc\' /></p>\r\n\r\n<p>In the above example, <code>%s</code> and <code>%d</code> are format specifiers. They indicate where and how to insert additional arguments into the output string. <code>%s</code> is for strings, and <code>%d</code> is for integers.</p>\r\n\r\n<h3>std::cout Object:</h3>\r\n\r\n<p>In C++, the preferred way of outputting text is using the <code>std::cout</code> object from the <code>iostream</code> library. It offers a more type-safe and flexible approach compared to <code>printf</code>. Here\'\'s how you can use <code>std::cout</code>:</p>\r\n\r\n<p><img lsf_file_name=\'1_6_stdcoutFunc\' /></p>\r\n\r\n<p>In this example, <code>&lt;&lt;</code> is the insertion operator. It inserts data into the output stream. <code>std::endl</code> is used to insert a newline character and flush the output buffer.</p>\r\n\r\n<h3>Special Characters:</h3>\r\n\r\n<p>C++ supports special escape sequences to represent special characters in output strings. Here are some common escape sequences:</p>\r\n\r\n<ul>\r\n    <li><code>\\n</code> : Newline character</li>\r\n    <li><code>\\t</code> : Tab character</li>\r\n    <li><code>\\\"</code> : Double quote character</li>\r\n    <li><code>\\\\</code> : Backslash character</li>\r\n</ul>\r\n\r\n<p><img lsf_file_name=\'1_6_SpecialCharacters\' /></p>\r\n\r\n<h3>Conclusion:</h3>\r\n\r\n<p>In this lesson, we\'\'ve explored how to handle the output stream in C++. We\'\'ve covered the <code>printf</code> function for formatted output, the <code>std::cout</code> object for type-safe output, and special escape sequences for representing special characters. Understanding these concepts is essential for effective output handling in C++ programs.</p>\r\n\r\n<p>In the next lesson, we\'\'ll explore what variables are, the various data types available, initialization, variable creation, assignment statements, variable naming conventions, and more.. Stay tuned for more learning!</p>', 6, 70),
(7, 1, 'Variables and Data Types in C++', '<p>Welcome to the seventh lesson of our course! In this lesson, we\'ll delve into variables and data types in C++. We\'ll explore what variables are, the various data types available, initialization, variable creation, assignment statements, variable naming conventions, and more.</p>\r\n\r\n<h3>Variables:</h3>\r\n\r\n<p>A variable in C++ is a named memory location that stores a value. Variables are used to hold data that may change during the program\'s execution.</p>\r\n\r\n<h3>Data Types:</h3>\r\n\r\n<p>C++ provides several built-in data types to represent different kinds of values. Each data type has a specific size in memory and a range of values it can hold.</p>\r\n\r\n<table class=\"table table-bordered\"><thead>\r\n  <tr>\r\n    <th>Data Type</th>\r\n    <th>Size (bytes)</th>\r\n    <th>Range of Values</th>\r\n  </tr></thead><tbody>\r\n  <tr>\r\n    <td>int</td>\r\n    <td>4</td>\r\n    <td>-2,147,483,648 to 2,147,483,647</td>\r\n  </tr>\r\n  <tr>\r\n    <td>short</td>\r\n    <td>2</td>\r\n    <td>-32,768 to 32,767</td>\r\n  </tr>\r\n  <tr>\r\n    <td>long</td>\r\n    <td>4</td>\r\n    <td>-2,147,483,648 to 2,147,483,647</td>\r\n  </tr>\r\n  <tr>\r\n    <td>long long</td>\r\n    <td>8</td>\r\n    <td>-9,223,372,036,854,775,808 to 9,223,372,036,854,775,807</td>\r\n  </tr>\r\n  <tr>\r\n    <td>float</td>\r\n    <td>4</td>\r\n    <td>Approximately 1.2E-38 to 3.4E+38</td>\r\n  </tr>\r\n  <tr>\r\n    <td>double</td>\r\n    <td>8</td>\r\n    <td>Approximately 2.3E-308 to 1.7E+308</td>\r\n  </tr>\r\n  <tr>\r\n    <td>char</td>\r\n    <td>1</td>\r\n    <td>-128 to 127 or 0 to 255 (if unsigned)</td>\r\n  </tr>\r\n  <tr>\r\n    <td>bool</td>\r\n    <td>1</td>\r\n    <td>true or false</td>\r\n  </tr></tbody>\r\n</table>\r\n\r\n<h3>Initialization:</h3>\r\n\r\n<p>Initialization is the process of assigning an initial value to a variable. Variables can be initialized at the time of declaration or later in the program.</p>\r\n\r\n<p><img lsf_file_name=\'1_7_Initialization\' /></p>\r\n\r\n<h4>Assignment Statement:</h4>\r\n\r\n<p>The assignment statement is used to assign a value to a variable.</p>\r\n\r\n<p><img lsf_file_name=\'1_7_AssignmentStatement\' /></p>\r\n\r\n<h3>Variable Naming Conventions:</h3>\r\n\r\n<ul>\r\n  <li>Variable names should be descriptive and meaningful.</li>\r\n  <li>They should start with a letter (or underscore) and can contain letters, digits, and underscores.</li>\r\n  <li>Variable names are case-sensitive.</li>\r\n  <li>Avoid using reserved keywords as variable names.</li>\r\n</ul>\r\n\r\n<h3>Example Usage of Data Types:</h3>\r\n\r\n<p><img lsf_file_name=\'1_7_DataTypeExample\' /></p>\r\n\r\n<h3>Usage of sizeof:</h3>\r\n\r\n<p>The sizeof operator in C++ returns the size of a variable or data type in bytes. It\'s useful for determining the memory size of variables and data types.</p>\r\n\r\n<p><img lsf_file_name=\'1_7_sizeofExample\' /></p>\r\n\r\n<h3>Conclusion:</h3>\r\n\r\n<p>In this lesson, we\'ve explored variables and data types in C++. We discussed what variables are, the various built-in data types, initialization, assignment statements, variable naming conventions, and provided examples of their usage. Understanding these concepts is crucial for effective programming in C++.</p>\r\n\r\n<p>Stay tuned for the next lesson, where we\'ll cover reading data from the input stream, checking the validity of input, and clearing the input stream in case of invalid input. Happy coding!</p>', 7, 80),
(8, 1, 'Handling Input Stream', '<p>Welcome to the eighth lesson of our course! In this lesson, we\'ll explore input validation and handling in C++. We\'ll cover reading data from the input stream, checking the validity of input, and clearing the input stream in case of invalid input.</p>\r\n\r\n<h3>Input Validation and Handling:</h3>\r\n\r\n<p>In C++, when reading input from the standard input stream (<code>std::cin</code>), it\'s essential to validate the input and handle any errors that may occur during the input process.</p>\r\n\r\n<h3>Reading Data from Input Stream:</h3>\r\n\r\n<p>To read data from the input stream, we use the extraction operator (<code>&gt;&gt;</code>). Here\'s an example of reading an integer from the input stream:</p>\r\n\r\n<p><img lsf_file_name=\'1_8_ReadingInputData\' /></p>\r\n\r\n<p>Consider the following example where we attempt to read an integer from the input stream. When an integer is entered, the program behaves as expected, but when a string is entered, it causes an error.</p>\r\n<div style=\"display : flex; gap:20px;\">\r\n  <p><img lsf_file_name=\'1_8_IntegerInput\' /></p>\r\n  <p><img lsf_file_name=\'1_8_StringInput\' /></p>\r\n</div>\r\n<h3>Checking Validity of Input and Clearing Input Stream:</h3>\r\n\r\n<p>After reading data from the input stream, it\'s crucial to check if the input operation was successful. This can be done using the <code>std::cin.fail()</code> function. If input fails (e.g., when non-numeric data is entered for an integer input), <code>std::cin.fail()</code> returns true.</p>\r\n\r\n<p>If an input operation fails or invalid data is entered, the input stream\'s error flag is set. To clear the error flag and discard invalid input, we use <code>std::cin.clear()</code> to reset the stream\'s state and <code>std::cin.ignore()</code> to discard the invalid input.</p>\r\n\r\n<p><img lsf_file_name=\'1_8_InputDataValidation\' /></p>\r\n\r\n<p>If incorrect data is entered, the user will be informed about it:</p>\r\n\r\n<p><img lsf_file_name=\'1_8_ErrorInputMsg\' /></p>\r\n\r\n<h3>Conclusion:</h3>\r\n\r\n<p>In this lesson, we\'ve explored input validation and handling in C++. We covered reading data from the input stream, checking the validity of input using <code>std::cin.fail()</code>, and clearing the input stream in case of invalid input. Understanding these concepts is crucial for effective input handling in C++.</p>\r\n\r\n<p>Stay tuned for the next lesson, where we\'ll delve into more advanced topics in C++ programming. Happy coding!</p>', 8, 70),
(9, 1, 'Arithmetic Adventures: Exploring Mathematical Operations', '<p>Welcome to the ninth lesson of our course! In this lesson, we\'ll explore mathematical operations and arithmetic expressions in C++. We\'ll cover various operators, order of operations, calculations with variables, and important considerations for division.</p>\r\n\r\n<h3>Mathematical Operations:</h3>\r\n\r\n<p>Mathematical operators are symbols used to perform arithmetic operations in programming. They include addition (<code>+</code>), subtraction (<code>-</code>), multiplication (<code>*</code>), division (<code>/</code>), and modulus (<code>%</code>), among others.</p>\r\n\r\n<h3>Order of Operations:</h3>\r\n\r\n<p>In arithmetic expressions, operations are performed according to their precedence. The order of operations is as follows:</p>\r\n\r\n<ol>\r\n  <li>Parentheses <code>()</code></li>\r\n  <li>Exponentiation (<code>^</code>)</li>\r\n  <li>Multiplication (<code>*</code>) and Division (<code>/</code>)</li>\r\n  <li>Addition (<code>+</code>) and Subtraction (<code>-</code>)</li>\r\n</ol>\r\n\r\n<p>Here\'s an example demonstrating the order of operations:</p>\r\n\r\n<p><img lsf_file_name=\'1_9_OrderOfOperations\' /></p>\r\n\r\n<h3>Calculations with Variables:</h3>\r\n\r\n<p>We can perform calculations using variables by assigning the result of an expression back to a variable:</p>\r\n\r\n<p><img lsf_file_name=\'1_9_CalculationsWithVariables\' /></p>\r\n\r\n<p class=\"warning\"><strong>Warning about Division:</strong> <br> Division by zero is not allowed in C++ and can lead to undefined behavior. Always ensure that the divisor is not zero before performing division.</p>\r\n\r\n<h3>Modulus Operator :</h3>\r\n\r\n<p>The modulus operator (<code>%</code>) returns the remainder of a division operation. Note that it cannot be used with floating-point numbers (e.g., double).</p>\r\n\r\n<h4>Example 1: Correct Usage</h4>\r\n\r\n<p><img lsf_file_name=\'1_9_ModulusOperatorCorrectUsage\' /></p>\r\n\r\n<p>Output:</p>\r\n\r\n<p><img lsf_file_name=\'1_9_ModulusOperatorOutput\' /></p>\r\n\r\n<h4>Example 2:  Error Caused by Invalid Usage</h4>\r\n\r\n<p><img lsf_file_name=\'1_9_ModulusOperatorErrorUsage\' /></p>\r\n\r\n<p>This code will result in a compilation error due to attempting to use the modulus operator with a floating-point number (double). The modulus operator can only be used with integer types.</p>\r\n\r\n<h3>Improved Code Readability:</h3>\r\n\r\n<p>Since arithmetic operations are the most frequently used operations in a program, several facilities for performing mathematical operations have been developed over the years. The first one is to perform actions on the current value of the variable. Let\'s assume that we have a variable x whose initial value is 5. Then we want the same variable to contain a new value, e.g. twice as large. With our current knowledge, we could do it e.g. like this:</p>\r\n\r\n<p><img lsf_file_name=\'1_9_ImprovedCodeReadability\' /></p>\r\n\r\n<p>Of course, the same thing can be written without creating an additional variable, i.e.:</p>\r\n\r\n<p><img lsf_file_name=\'1_9_ImprovedCodeReadability_2\' /></p>\r\n\r\n<p>You should already know what has been written above and be able to do it yourself. The new, shorter entry is below:</p>\r\n\r\n<p><img lsf_file_name=\'1_9_ImprovedCodeReadability_3\' /></p>\r\n\r\n<p>Shortened operation operators also exist for other arithmetic operations. Their summary is presented in the table below.</p>\r\n\r\n<table class=\"table table-bordered\">\r\n  <thead><tr>\r\n    <th>Operation</th>\r\n    <th>Traditional Notation</th>\r\n    <th>Shorthand Notation</th>\r\n  </tr></thead>\r\n  <tbody><tr>\r\n    <td>Addition</td>\r\n    <td>x = x + y;</td>\r\n    <td>x += y;</td>\r\n  </tr>\r\n  <tr>\r\n    <td>Subtraction</td>\r\n    <td>x = x - y;</td>\r\n    <td>x -= y;</td>\r\n  </tr>\r\n  <tr>\r\n    <td>Multiplication</td>\r\n    <td>x = x * y;</td>\r\n    <td>x *= y;</td>\r\n  </tr>\r\n  <tr>\r\n    <td>Division</td>\r\n    <td>x = x / y;</td>\r\n    <td>x /= y;</td>\r\n  </tr>\r\n  <tr>\r\n    <td>Modulus</td>\r\n    <td>x = x % y;</td>\r\n    <td>x %= y;</td>\r\n  </tr></tbody>\r\n</table>\r\n\r\n<h3>Increment and Decrement Operators:</h3>\r\n\r\n<p>Below is a table showing the concepts of incrementation and decrementation</p>\r\n\r\n<table class=\"table table-bordered\">\r\n   <thead><tr>\r\n     <th>Concept</th>\r\n     <th>Description</th>\r\n     <th>Example</th>\r\n   </tr></thead>\r\n   <tbody><tr>\r\n     <td>Increment</td>\r\n     <td>Increment the value of a variable by one</td>\r\n     <td>variable += 1;</td>\r\n   </tr>\r\n   <tr>\r\n     <td>Decrement</td>\r\n     <td>Decrease the value of a variable by one</td>\r\n     <td>variable -= 1;</td>\r\n   </tr></tbody>\r\n</table>\r\n\r\n<p>Although the shortened notation is a convenient solution for increasing or decreasing a value by one, there are additional notations to perform these operations, and they are:</p>\r\n\r\n<table class=\"table table-bordered\">\r\n  <thead><tr>\r\n    <th>Concept</th>\r\n    <th>Example</th>\r\n    <th>Equivalent</th>\r\n  </tr></thead>\r\n  <tbody><tr>\r\n    <td>Pre-incrementation</td>\r\n    <td>++variable;</td>\r\n    <td>variable += 1;</td>\r\n  </tr>\r\n  <tr>\r\n    <td>Post-incrementation</td>\r\n    <td>variable++;</td>\r\n    <td>variable += 1;</td>\r\n  </tr>\r\n  <tr>\r\n    <td>Pre-decrementation</td>\r\n    <td>\-\-variable;</td>\r\n    <td>variable -= 1;</td>\r\n  </tr>\r\n  <tr>\r\n    <td>Post-decrementation</td>\r\n    <td>variable\-\-;</td>\r\n    <td>variable -= 1;</td>\r\n  </tr></tbody>\r\n</table>\r\n\r\n<p>Let\'s now consider an example:</p>\r\n\r\n<p><img lsf_file_name=\'1_9_IncrementDecrementOperators\' /></p>\r\n\r\n<h3>Summary:</h3>\r\n\r\n<p>In this lesson, we\'ve explored mathematical operations and arithmetic expressions in C++. We covered various operators, order of operations, calculations with variables, considerations for division, shorthand arithmetic operators, and increment and decrement operators.</p>\r\n\r\n<p><img lsf_file_name=\'1_9_Summary\' /></p>\r\n\r\n<p>Understanding these concepts is crucial for effective mathematical operations and arithmetic expressions in C++.</p>\r\n\r\n<p>Stay tuned for the next lesson, where we\'ll explore comparison operators in C++ and discuss multiple assignments. Happy coding!</p>', 9, 90),
(10, 1, 'Comparison Operators', '<p>Welcome to the ten lesson of our course! In this lesson, we\'ll explore comparison operators in C++ and discuss multiple assignments.</p>\r\n\r\n<h3>Comparison Operators:</h3>\r\n\r\n<p>Comparison operators are used to compare two values and return a Boolean result (true or false). </p>\r\n\r\n<p class=\"note\">In C++, Boolean values are represented by the values 0 (false) and 1 (true). When a comparison operation evaluates to true, it returns 1, and when it evaluates to false, it returns 0.</p>\r\n\r\n<p>Here are the commonly used comparison operators in C++:</p>\r\n\r\n<table class=\"table table-bordered\">\r\n    <thead><tr>\r\n        <th>Operator</th>\r\n        <th>Symbol</th>\r\n        <th>Description</th>\r\n    </tr></thead><tbody>\r\n    <tr>\r\n        <td>Equal to</td>\r\n        <td><code>==</code></td>\r\n        <td>Checks if two values are equal.</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Not equal to</td>\r\n        <td><code>!=</code></td>\r\n        <td>Checks if two values are not equal.</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Greater than</td>\r\n        <td><code>></code></td>\r\n        <td>Checks if the left operand is greater than the right operand.</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Less than</td>\r\n        <td><code>&lt;</code></td>\r\n        <td>Checks if the left operand is less than the right operand.</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Greater than or equal to</td>\r\n        <td><code>>=</code></td>\r\n        <td>Checks if the left operand is greater than or equal to the right operand.</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Less than or equal to</td>\r\n        <td><code>&lt;=</code></td>\r\n        <td>Checks if the left operand is less than or equal to the right operand.</td>\r\n    </tr></tbody>\r\n</table>\r\n\r\n\r\n<h4>Example:</h4>\r\n\r\n<p><img lsf_file_name=\'1_10_ComparisonOperators\' /></p>\r\n\r\n<p class=\"warning\">Warning : In case we want to print the comparison result to the screen using the std::cout stream, parentheses are necessary. If the brackets are missing, we will get the following message:</p>\r\n\r\n<h3>Multiple Assignments:</h3>\r\n\r\n<p>Multiple assignments allow assigning values to multiple variables in a single statement.</p>\r\n\r\n<h4>Example:</h4>\r\n\r\n<p><img lsf_file_name=\'1_10_MultipleAssignment\' /></p>\r\n\r\n<p><img lsf_file_name=\'1_10_MultipleAssignment_2\' /></p>\r\n\r\n<p>The result of these assignments will be the same :</p>\r\n\r\n<p><img lsf_file_name=\'1_10_MultipleAssignmentResult\' /></p>\r\n\r\n<p class=\"warning\">Beginners may make the following mistakes when using comparison operators:\r\n  <ul>\r\n    <li>Confusing the assignment operator (=) with the equality operator (==).</li>\r\n    <li>Forgetting to use parentheses when performing complex comparisons.</li>\r\n  </ul>\r\n</p>\r\n\r\n<h3>Summary:</h3>\r\n\r\n<p>In this lesson, we\'ve explored comparison operators in C++, which are used to compare values, and multiple assignments, which allow assigning values to multiple variables in a single statement. Understanding these concepts is essential for effective decision-making in C++ programs.</p>\r\n\r\n<p>Stay tuned for the next lesson, where we\'ll cover what logical operators are, their basic types and more. Happy coding!</p>', 10, 70),
(11, 1, 'Logical Operators', '<p>Welcome to the tenth lesson of our course! In this lesson, we\'\'ll explore logical operators in C++. We\'\'ll cover what logical operators are, their basic types, and delve into each operator in detail, including the negation, logical OR, and logical AND operators.</p>\r\n\r\n<h3>Logical Operators:</h3>\r\n\r\n<p>Logical operators are used to perform logical operations on boolean values (true or false). They allow us to combine or modify conditions in control flow statements and expressions.</p>\r\n\r\n<h4>Basic Logical Operators:</h4>\r\n\r\n<table>\r\n    <tr>\r\n        <th>Name</th>\r\n        <th>Symbol</th>\r\n        <th>Description</th>\r\n    </tr>\r\n    <tr>\r\n        <td>Negation</td>\r\n        <td>!</td>\r\n        <td>Negates the boolean value</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Logical OR</td>\r\n        <td>||</td>\r\n        <td>Returns true if either operand is true</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Logical AND</td>\r\n        <td>&&</td>\r\n        <td>Returns true only if both operands are true</td>\r\n    </tr>\r\n</table>\r\n\r\n<h3>Negation Operator (!):</h3>\r\n\r\n<p>The negation operator (<code>!</code>) is a unary operator that reverses the value of its operand. If the operand is true, the result is false, and if the operand is false, the result is true.</p>\r\n\r\n<h4>Example:</h4>\r\n\r\n<p><img lsf_file_name=\'1_11_NegationOperator\' /></p>\r\n\r\n<p>Output :</p>\r\n\r\n<p><img lsf_file_name=\'1_11_NegationOperatorOutput\' /></p>\r\n\r\n<h3>Logical OR Operator (||):</h3>\r\n\r\n<p>The logical OR operator (<code>||</code>) returns true if either of its operands is true. It evaluates the second operand only if the first operand evaluates to false.</p>\r\n\r\n<h4>Example 1:</h4>\r\n\r\n<p><img lsf_file_name=\'1_11_OrOperator\' /></p>\r\n\r\n<p>Output :</p>\r\n\r\n<p><img lsf_file_name=\'1_11_OrOperatorOutput\' /></p>\r\n\r\n<h4>Example 2:</h4>\r\n\r\n<p><img lsf_file_name=\'1_11_OrOperator_2\' /></p>\r\n\r\n<p>Output :</p>\r\n\r\n<p><img lsf_file_name=\'1_11_OrOperatorOutput_2\' /></p>\r\n\r\n<h3>Logical AND Operator (&&):</h3>\r\n\r\n<p>The logical AND operator (<code>&&</code>) returns true only if both of its operands are true. It evaluates the second operand only if the first operand evaluates to true.</p>\r\n\r\n<h4>Example:</h4>\r\n\r\n<p><img lsf_file_name=\'1_11_AndOperator\' /></p>\r\n\r\n<p>Output :</p>\r\n\r\n<p><img lsf_file_name=\'1_11_AndOperatorOutput\' /></p>\r\n\r\n<h3>Order of Logical Operations:</h3>\r\n\r\n<p>Logical NOT (<code>!</code>) has the highest precedence, followed by logical AND (<code>&amp;&amp;</code>), and then logical OR (<code>||</code>). Parentheses can be used to override the default order.</p>\r\n\r\n<h4>Example:</h4>\r\n\r\n<p><img lsf_file_name=\'1_11_OrderOfLogicalOperations\' /></p>\r\n\r\n<h3>Summary:</h3>\r\n\r\n<p>In this lesson, we\'\'ve explored logical operators in C++. We covered the negation, logical OR, and logical AND operators, along with their functionalities and usage. Understanding these concepts is crucial for effective logical operations in C++.</p>\r\n\r\n<p>Fortunately, logical operations are the last fundamental topic that needs to be explained before moving on to the actual learning of C++ programming. This concludes our C++ beginner course. Before you continue learning C++, you should be aware that all the knowledge collected so far will be 100% used in subsequent chapters and will be constantly intertwined with new, not yet discussed issues. So if you feel that a particular chapter was not fully understandable to you, go back to it now. Happy coding!</p>', 11, 90);
";

    $insert[] = "INSERT INTO `lesson_file` (`lsf_lessons_file_id`, `lsf_lesson_id`, `lsf_file_name`, `lsf_alt_text`, `lsf_file_path`) VALUES
(1, 1, '1_1_CodeBlocksInstalling', 'Code::Blocks Installation', '../../lesson_file/1_1_CodeBlocksInstalling.png'),
(2, 3, '1_3_FirstProgram', 'First Program Code', '../../lesson_file/1_3_FirstProgram.png'),
(3, 3, '1_3_FirstProgramOutput', 'First Program Result', '../../lesson_file/1_3_FirstProgramOutput.png'),
(4, 3, '1_3_FirstRunProgram', 'Compile Your First Program', '../../lesson_file/1_3_FirstRunProgram.png'),
(5, 4, '1_4_iostreamLib', 'Using the iostream library', '../../lesson_file/1_4_iostreamLib.png'),
(6, 4, '1_4_cstdioLib', 'Using the cstdio library', '../../lesson_file/1_4_cstdioLib.png'),
(7, 4, '1_4_ProgramOutput', 'Program result', '../../lesson_file/1_4_ProgramOutput.png'),
(8, 5, '1_5_SingleLineComment', 'Single-Line Comments', '../../lesson_file/1_5_SingleLineComment.png'),
(9, 5, '1_5_MultiLineComment', 'Multi-Line Comments', '../../lesson_file/1_5_MultiLineComment.png'),
(10, 5, '1_5_CommentsExample', 'Comments Example', '../../lesson_file/1_5_CommentsExample.png'),
(11, 6, '1_6_PrintfFunc', 'printf() Function', '../../lesson_file/1_6_PrintfFunc.png'),
(12, 6, '1_6_stdcoutFunc', 'std::cout<< Function', '../../lesson_file/1_6_stdcoutFunc.png'),
(13, 6, '1_6_SpecialCharacters', 'Special Characters', '../../lesson_file/1_6_SpecialCharacters.png'),
(14, 7, '1_7_Initialization', 'Initialization', '../../lesson_file/1_7_Initialization.png'),
(15, 7, '1_7_AssignmentStatement', 'Assignment Statement', '../../lesson_file/1_7_AssignmentStatement.png'),
(16, 7, '1_7_DataTypeExample', 'Example Usage of Data Types', '../../lesson_file/1_7_DataTypeExample.png'),
(17, 7, '1_7_sizeofExample', 'sizeof() Example', '../../lesson_file/1_7_sizeofExample.png'),
(18, 8, '1_8_ReadingInputData', 'Reading Input Data', '../../lesson_file/1_8_ReadingInputData.png'),
(19, 8, '1_8_IntegerInput', 'Success', '../../lesson_file/1_8_IntegerInput.png'),
(20, 8, '1_8_StringInput', 'Error', '../../lesson_file/1_8_StringInput.png'),
(21, 8, '1_8_InputDataValidation', 'Input Data Validation', '../../lesson_file/1_8_InputDataValidation.png'),
(22, 8, '1_8_ErrorInputMsg', 'Error Input Message', '../../lesson_file/1_8_ErrorInputMsg.png'),
(23, 9, '1_9_OrderOfOperations', 'Order Of Operations', '../../lesson_file/1_9_OrderOfOperations.png'),
(24, 9, '1_9_CalculationsWithVariables', 'Calculations With Variables', '../../lesson_file/1_9_CalculationsWithVariables.png'),
(25, 9, '1_9_ModulusOperatorCorrectUsage', 'Modulus Operator : Correct Usage', '../../lesson_file/1_9_ModulusOperatorCorrectUsage.png'),
(26, 9, '1_9_ModulusOperatorOutput', 'Modulus Operator : Output', '../../lesson_file/1_9_ModulusOperatorOutput.png'),
(27, 9, '1_9_ModulusOperatorErrorUsage', 'Modulus Operator : Error', '../../lesson_file/1_9_ModulusOperatorErrorUsage.png'),
(28, 9, '1_9_ImprovedCodeReadability', 'Improved Code Readability : Example 1', '../../lesson_file/1_9_ImprovedCodeReadability.png'),
(29, 9, '1_9_ImprovedCodeReadability_2', 'Improved Code Readability : Example 2', '../../lesson_file/1_9_ImprovedCodeReadability_2.png'),
(30, 9, '1_9_ImprovedCodeReadability_3', 'Improved Code Readability : Example 3', '../../lesson_file/1_9_ImprovedCodeReadability_3.png'),
(31, 9, '1_9_IncrementDecrementOperators', 'Increment And Decrement Operators', '../../lesson_file/1_9_IncrementDecrementOperators.png'),
(32, 9, '1_9_Summary', 'Summary Code', '../../lesson_file/1_9_Summary.png'),
(33, 10, '1_10_ComparisonOperators', 'Comparison Operators', '../../lesson_file/1_10_ComparisonOperators.png'),
(34, 10, '1_10_MultipleAssignment', 'Multiple Assignments : Example 1', '../../lesson_file/1_10_MultipleAssignment.png'),
(35, 10, '1_10_MultipleAssignment_2', 'Multiple Assignments : Example 2', '../../lesson_file/1_10_MultipleAssignment_2.png'),
(36, 10, '1_10_MultipleAssignmentResult', 'Result of Multiple Assignments', '../../lesson_file/1_10_MultipleAssignmentResult.png'),
(37, 11, '1_11_NegationOperator', 'Negation Operator', '../../lesson_file/1_11_NegationOperator.png'),
(38, 11, '1_11_NegationOperatorOutput', 'Negation Operator Output', '../../lesson_file/1_11_NegationOperatorOutput.png'),
(39, 11, '1_11_OrOperator', 'OR Operator: Example 1', '../../lesson_file/1_11_OrOperator.png'),
(40, 11, '1_11_OrOperatorOutput', 'OR Operator Output: Example 1', '../../lesson_file/1_11_OrOperatorOutput.png'),
(41, 11, '1_11_OrOperator_2', 'OR Operator: Example 2', '../../lesson_file/1_11_OrOperator_2.png'),
(42, 11, '1_11_OrOperatorOutput_2', 'OR Operator Output: Example 2', '../../lesson_file/1_11_OrOperatorOutput_2.png'),
(43, 11, '1_11_AndOperator', 'AND Operator', '../../lesson_file/1_11_AndOperator.png'),
(44, 11, '1_11_AndOperatorOutput', 'AND Operator Output', '../../lesson_file/1_11_AndOperatorOutput.png'),
(45, 11, '1_11_OrderOfLogicalOperations', 'Order Of Logical Operations', '../../lesson_file/1_11_OrderOfLogicalOperations.png');
";

$insert[]="INSERT INTO `task_type` (`tt_task_type_id`, `tt_task_type_name`) VALUES
(1, 'Single choice'),
(2, 'Truth False'),
(3, 'Calculations'),
(4, 'Multiple choice'),
(5, 'Complete the sentence'),
(6, 'Match'),
(7, 'Write the code');
";

$insert[]="INSERT INTO `task` (`tsk_task_id`, `tsk_lesson_id`, `tsk_task_type_id`, `tsk_task_description`, `tsk_task_options`, `tsk_task_solution`) VALUES
(1, 4, 1, 'What is the purpose of the \'<code>include</code>\' directive in C++?', 'To display output messages;To read input from the user;To provide instructions to the compiler;To define the main program block', 'To provide instructions to the compiler'),
(2, 4, 6, 'Choose the correct answer:', 'Library <code>iostream</code>   -   provides standard input/output functionality<br>Library <code>cstdio</code>   -   offers input/output operations similar to the C standard library;Library <code>cstdio</code>   -   provides standard input/output functionality<br>Library <code>iostream</code>   -   offers input/output operations similar to the C standard library', 'Library <code>iostream</code>   -   provides standard input/output functionality<br>Library <code>cstdio</code>   -   offers input/output operations similar to the C standard library'),
(3, 6, 4, 'Which of the following are common escape sequences used in C++? Select all that apply:', '\\\\n;\\\\t;\\\\b;\\\\\\\\', '\\\\n, \\\\t, \\\\\\\\'),
(4, 6, 5, 'Fill in the blank with the appropriate escape sequence to represent a tab character:<br> Please insert a \'<code>____</code>\' between the fields.', NULL, '\\\\t'),
(5, 4, 1, 'What is the purpose of the \'<code>std::endl</code>\' statement in C++?', 'To include libraries;To end the program execution;To flush the output buffer and move to the next line;To declare variables', 'To flush the output buffer and move to the next line'),
(6, 6, 7, 'Write a C++ code snippet using <code>std::cout</code> to display the following message:\n<p class=\"console-output mb-3 p-3\" style=\"width:310px\">I love programming in C++.</p><p>Ensure that the provided code snippet outputs the specified message followed by a newline to the console (using std::____)</p>\n', NULL, 'std::cout << \"I love programming in C++.\" << std::endl;'),
(7, 7, 1, 'What is the purpose of variables in C++?', 'To display messages to the user;To store data that may change during program execution;To include libraries in the program;To end the program execution', 'To store data that may change during program execution'),
(8, 7, 6, 'Which of the following options correctly matches the data types with their respective sizes in bytes?', 'int - 1 byte, float - 4 bytes, char - 4 bytes, double - 8 bytes;int - 4 byte, float - 4 bytes, char - 1 bytes, double - 8 bytes;int - 8 byte, float - 1 bytes, char - 4 bytes, double - 4 bytes;int - 4 byte, float - 8 bytes, char - 1 bytes, double - 4 bytes', 'int - 4 byte, float - 4 bytes, char - 1 bytes, double - 8 bytes'),
(9, 7, 7, 'Write a C++ code snippet to declare and initialize an integer variable named <code>age</code> with a value of 30 <strong>in one line</strong>', NULL, 'int age = 30;'),
(10, 7, 7, 'Write a C++ code snippet to declare a variable named <code>temperature</code> of type double <strong>without initializing it.</strong>', NULL, 'double temperature;'),
(11, 7, 5, 'Fill in the blank with the appropriate term:<br> The sizeof() operator returns the size of a variable or data type in \'<code>____</code>\'.', NULL, 'bytes'),
(12, 7, 2, 'True or False: Variable names in C++ can contain spaces.Enter <strong>True</strong> or <strong>False</strong> in the textarea.', NULL, 'False'),
(13, 8, 1, 'What is the function used to check if an input operation failed in C++?', 'std::cout.fail();std::cin.error();std::cin.fail();std::cout.error()', 'std::cin.fail()'),
(14, 8, 2, 'True or False: In C++, the extraction operator (>>) can only be used for reading numeric data.Enter <strong>True</strong> or <strong>False</strong> in the textarea.', NULL, 'False'),
(15, 8, 6, 'Which of the following options correctly matches the fubctions with their respective purposes?', '<code>std::cin.clear()</code> - Discard invalid input,<br><code>std::cin.ignore()</code> - Reset the stream\'s state,<br> <code>std::cin.fail()</code> - Clear the input stream\'s error flag;<code>std::cin.clear()</code> - Reset the stream\'s state,<br><code>std::cin.ignore()</code> - Clear the input stream\'s error flag,<br><code>std::cin.fail()</code> - Discard invalid input;\r\n<code>std::cin.clear()</code> - Reset the stream\'s state,<br><code>std::cin.ignore()</code> - Discard invalid input,<br><code>std::cin.fail()</code> - Clear the input stream\'s error flag;<code>std::cin.clear()</code> - Clear the input stream\'s error flag,<br><code>std::cin.ignore()</code> - Reset the stream\'s state,<br><code>std::cin.fail()</code> - Discard invalid input', '<code>std::cin.clear()</code> - Reset the stream\'s state,<br><code>std::cin.ignore()</code> - Discard invalid input,<br><code>std::cin.fail()</code> - Clear the input stream\'s error flag'),
(16, 8, 2, 'True or False: When input fails in C++, the <code>std::cin.fail()</code> function returns false.Enter <strong>True</strong> or <strong>False</strong> in the textarea.', NULL, 'False'),
(17, 8, 7, 'Write a C++ program that prompts the user to enter two integers and then calculates and displays their sum.<br><div class=\"row\"><div class=\"column\"><p>Requirements:</p><ul><li>Initialize variables num1, num2 and sum in one line without assigning a value.</li><li>Prompt the user to enter the first integer.(\"Enter the first integer: \")</li><li>Read the first integer from the user as num1.</li><li>Prompt the user to enter the second integer. (\"Enter the second integer: \")</li><li>Read the second integer from the user as num2.</li><li>Calculate the sum of the two integers as sum.</li>    <li>Display the sum to the user.</li></ul></div><div class=\"column\"><p>The result in the console should be:</p><p>Enter the first integer: 10</p><p>Enter the second integer: 20</p><p>The sum of 10 and 20 is: 30</p></div></div>', NULL, 'int num1, num2, sum;\r\nstd::cout << \"Enter the first integer: \";\r\nstd::cin >> num1;\r\nstd::cout << \"Enter the second integer: \";\r\nstd::cin >> num2;\r\nsum = num1 + num2;\r\nstd::cout << \"The sum of \" << num1 << \" and \" << num2 << \" is: \" << sum << std::endl;'),
(18, 9, 2, 'True or False: The order of operations in C++ is parentheses first, followed by exponentiation, then multiplication and division, and finally addition and subtraction.Enter <strong>True</strong> or <strong>False</strong> in the textarea.', NULL, 'True'),
(19, 9, 2, 'True or False: Division by zero is allowed in C++ and results in the output of \"infinity\".Enter <strong>True</strong> or <strong>False</strong> in the textarea.', NULL, 'False'),
(20, 9, 7, 'Write a C++ code snippet to calculate the area of a rectangle given its length and width<br><div class=\"row\"><div class=\"column\"><p>Requirements:</p><ul><li>Initialize double variables length, width and area in one line without assigning a value.</li><li>Prompt the user to enter the first value.(\"Enter the length of the rectangle: \")</li><li>Read the first double from the user as length.</li><li>Prompt the user to enter the second value. (\"Enter the width of the rectangle: \")</li><li>Read the second integer from the user as width.</li><li>Calculate the area</li><li>Display the area to the user.</li></ul></div><div class=\"column\"><p>The result in the console should be:</p><p>\"The area of the rectangle is: 20\"</p></div></div>', NULL, 'double length, width, area; std::cout << \"Enter the length of the rectangle: \"; std::cin >> length; std::cout << \"Enter the width of the rectangle: \"; std::cin >> width; area = length * width; std::cout << \"The area of the rectangle is: \" << area << std::endl;'),
(21, 9, 3, 'What is the output of the following code snippet?<br><pre><code>int x = 10, y = 3; <br>double result = x / y;<br>\r\nstd::cout << result;</code></pre>', '3.33333;3;3.0;Compilation Error', '3.0'),
(22, 9, 3, 'If x = 10 and y = 5, what will be the value of z after executing the following code?<br><pre><code>int x = 10, y = 5; <br>int z = (x++) * (--y);</code></pre>', '45;55;60;50', '50'),
(23, 9, 3, 'What will be the value of z after executing this code?<br><pre><code>int x = 10;\r\n <br>int y = 5;<br>int z = x % y; </code></pre>', '-1;0.;1;0.5', '0.'),
(24, 11, 5, 'The negation operator in C++ is denoted by the symbol  \'<code>________</code>\'.', NULL, '!'),
(25, 11, 1, 'What is the purpose of the logical OR operator ( \'<code>||</code>\' ) in C++?', 'Returns true if both operands are true;Returns true if either operand is true;Negates the boolean value;Returns true only if both operands are true', 'Returns true if either operand is true'),
(26, 11, 2, 'True or False: In C++, when a comparison operation evaluates to true, it returns the value 0.Enter <strong>True</strong> or <strong>False</strong> in the textarea.', NULL, 'False'),
(27, 11, 2, 'True or False: In C++, the assignment operator (\'<code>=</code>\') is used for comparison operations.Enter <strong>True</strong> or <strong>False</strong> in the textarea.', NULL, 'False'),
(28, 11, 2, 'True or False: The logical AND operator (\'<code>&&</code>\') returns true if both of its operands are true.Enter <strong>True</strong> or <strong>False</strong> in the textarea.', NULL, 'True'),
(29, 11, 3, 'What will be the value of result after executing this code?<br><pre><code>int x = 10;<br>int y = 5;<br>bool result = (x > y) && (x != y);</code></pre>', 'True;False', 'True'),
(30, 11, 3, 'What will be the value of result after executing this code?<br><pre><code>int m = 10;<br>int n = 10;<br>bool result = (m <= n) && (m != n);</code></pre>', 'True;False', 'False'),
(31, 11, 3, 'What will be the value of result after executing this code?<br><pre><code>int x = 15;<br>int y = 20;<br>bool result = (x > y) && (x == y);</code></pre>', 'True;False', 'False'),
(32, 11, 3, 'What will be the value of result after executing this code?<br><pre><code>int a = 15;<br>int b = 7;<br>bool result = (a >= 10) || (b < 5);</code></pre>', 'True;False', 'True'),
(33, 11, 3, 'What will be the value of result after executing this code?<br><pre><code>int x = 20;<br>int y = 25;<br>bool result = (x < 30) && (y > 20);</code></pre>', 'True;False', 'True'),
(34, 11, 3, 'What will be the value of result after executing this code?<br><pre><code>int a = 10;<br>int b = 5;<br>bool result = (a < b) || (a == b);</code></pre>', 'True;False', 'False');
";
?>